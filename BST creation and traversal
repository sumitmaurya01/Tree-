// binary tree creation and traversal of the binary tree
// 1. inorder  2. preorder  3. postOrder  
#include<iostream>
using namespace std;

struct Node{
    int data;
    struct Node* left;
    struct Node* right;
};
struct Node* createNode(int data){
    struct Node* newNode= new Node;
    newNode->data=data;
    newNode->left=NULL;
    newNode->right=NULL;
    return newNode;
}
void inOrder(struct Node * root){
    if(root){
        inOrder(root->left);
        cout<<root->data<<" ";
        inOrder(root->right);
    }
}

void preOrder(struct Node* root){
    if(root){
        cout<<root->data<<" ";
        preOrder(root->left);
        preOrder(root->right);
    }
} 

void postOrder(struct Node* root){
    if(root){
          postOrder(root->left);
          postOrder(root->right);
          cout<<root->data<<" ";
    }
}
int main(){
   Node *root=createNode(10);
   Node* p1=createNode(5);
   Node * p2 = createNode(15);
   Node* p3= createNode(3);
   Node * p4=createNode(7);
   Node * p5=createNode(12);
   Node* p6= createNode(17);
   Node * p7=createNode(6);
   Node *p8 =createNode(14);

   root->left=p1;
   root->right=p2;
   p1->left=p3;
   p1->right=p4;
   p4->left=p7;
   p2->left=p5;
   p5->right=p8;
   p2->right=p6;
   
             // representation of the tree 
                //         10
                //      /      \
                //     5        15
                //   /  \      /   \
                //  3    7     12    17 
                //      /      \
                //     6        14 


   cout<<"Inorder : ";
    inOrder(root);
    cout<<endl<<"Preorder : ";
    preOrder(root);
    cout<<endl<<"PostOrder : ";
    postOrder(root);
    return 0;
}
